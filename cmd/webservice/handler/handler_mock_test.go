// Code generated by MockGen. DO NOT EDIT.
// Source: ../cmd/interface.go

// Package mock_cmd is a generated GoMock package.
package handler

import (
	user "entry_task/internal/model/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockUserUseCase) AuthenticateUser(username, password string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", username, password)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockUserUseCaseMockRecorder) AuthenticateUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockUserUseCase)(nil).AuthenticateUser), username, password)
}

// GetUserByID mocks base method.
func (m *MockUserUseCase) GetUserByID(userID int) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserUseCaseMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserUseCase)(nil).GetUserByID), userID)
}

// GetUserPicByID mocks base method.
func (m *MockUserUseCase) GetUserPicByID(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPicByID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPicByID indicates an expected call of GetUserPicByID.
func (mr *MockUserUseCaseMockRecorder) GetUserPicByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPicByID", reflect.TypeOf((*MockUserUseCase)(nil).GetUserPicByID), userID)
}

// RegisterUser mocks base method.
func (m *MockUserUseCase) RegisterUser(user user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserUseCaseMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserUseCase)(nil).RegisterUser), user)
}

// UpdateUser mocks base method.
func (m *MockUserUseCase) UpdateUser(user user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUseCaseMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUser), user)
}

// UploadUserPic mocks base method.
func (m *MockUserUseCase) UploadUserPic(id int, username, picData string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserPic", id, username, picData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadUserPic indicates an expected call of UploadUserPic.
func (mr *MockUserUseCaseMockRecorder) UploadUserPic(id, username, picData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserPic", reflect.TypeOf((*MockUserUseCase)(nil).UploadUserPic), id, username, picData)
}
